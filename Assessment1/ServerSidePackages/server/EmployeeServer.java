package server;/* Author Mary TomThis program demonstrates the use client server communication using writing/reading objects from the ObjectOutPutStream/ObjectInputStream.The server can read objects set from a client and add them to a LinkedList.This can also be appended to a file.The server also recevies an attribute value (firstName) from the client, searches the SalariedEmployee List for all the employees having the same first name. Send theseto the client. This way a user can search for a specific option and get results from the data kept on the server side.Observe the use of methods within the inner class and also the predicate and streams.To communicate the end of object communication, an object with a specific attribute value is sent, in this case firstName with value "finished".*///import static payRollFiles.TCPServer.clientSocket;import domain.SalariedEmployee;import java.net.*;import java.io.*;import java.util.LinkedList;import java.util.List;import java.util.function.Predicate;import java.util.stream.Collectors;//import static server.EmployeeServer.filenameBinary;public class EmployeeServer {  LinkedList<SalariedEmployee> employees;  static ServerSocket serverSocket;  final static int SERVER_PORT = 8888 ;  static Socket clientSocket;   static  DataFile file;   final static String filenameBinary = "employee.ser",              filenameText = "employee.txt";  public EmployeeServer() throws IOException{    this.employees = new LinkedList<>();   file = new DataFile();     System.setProperty("java.net.preferIPv4Stack" , "true");         serverSocket = new ServerSocket(SERVER_PORT );    System.out.println( serverSocket.getInetAddress());	               }  public void createClientThread()throws IOException {      System.out.println("Server waiting for cient request");       while(true) {           clientSocket = serverSocket.accept();      System.out.println( clientSocket.getInetAddress());//.accept(); 	      Connection c = new Connection(clientSocket,employees,filenameBinary  );               }  }    public void displayEmployees(){      System.out.println(employees);  } public static void main (String args[]) {    try {        EmployeeServer server = new EmployeeServer();        server.createClientThread();       // server.displayPersons();    }catch (IOException e) {        System.out.println(e);    }        }   }//this is for the tcp connection of mulitple clients.class Connection extends Thread {	   ObjectInputStream in;   ObjectOutputStream out;   Socket clientSocket;      String binaryFile;   private LinkedList<SalariedEmployee> employeeList;   public Connection (Socket aClientSocket,LinkedList<SalariedEmployee> employees, String filename ) {      employeeList = new LinkedList<>();       employeeList = employees;        this.binaryFile = filename;     try {       clientSocket = aClientSocket;          //  registry = reg;       //the streams are not used in this program.       in = new ObjectInputStream( clientSocket.getInputStream());       out =new ObjectOutputStream( clientSocket.getOutputStream());    //   dataFile = new ResidenceNeededDataFile("residenceNeeded.ser");       this.start();       System.out.println("thread started "+ in.getClass());      } catch(IOException e) {       System.out.println("Connection:"+e.getMessage());}   }   //This method can open the file and load the data if there is data written to a file.   public List<SalariedEmployee> searchEntry(String firstName){       Predicate<SalariedEmployee> find = r -> (r.getFirstName().equalsIgnoreCase(firstName));       LinkedList <SalariedEmployee> list= new LinkedList<>();   //       List<SalariedEmployee> list = employeeList.stream().filter(find)//           .collect(Collectors.toList());       //System.out.println(list);       return list;   }   public LinkedList<SalariedEmployee> getEmployeeList() {       return this.employeeList;   }   @Override   public void run(){       SalariedEmployee data;       List <SalariedEmployee> list = new LinkedList<>();       String finish = "";              try { // an echo server         while (true){           String option = (String) in.readObject();           if (option.equalsIgnoreCase("Employee")){              while((data = (SalariedEmployee)in.readObject())!= null){                  // System.out.println(data);                 if (data.getFirstName().equalsIgnoreCase("finished")){                    System.out.println("no more");                    break;                 }                 employeeList.add(new SalariedEmployee(data));                int count = EmployeeServer.file.writeToFile(this.binaryFile, employeeList);                System.out.println(count + "  Employees saved to file");                System.out.println("Server side list");                System.out.println(employeeList);                employeeList.clear();                           //the employeeList can be appended to a file.              }                      } else if (option.equalsIgnoreCase("view")){                 employeeList = EmployeeServer.file.readFromFile(this.binaryFile);                 System.out.println("employee in file");                 System.out.println(employeeList);                 while(employeeList.size()>0)                      out.writeObject(employeeList.removeFirst());                 if (employeeList.size() == 0)                     out.writeObject(new SalariedEmployee("finished"));            }         }        }catch(EOFException e) {             System.out.println("EOF:"+e.getMessage());        }        catch(IOException | ClassNotFoundException e){           System.out.println("IO:"+e.getMessage());        }               }     }     